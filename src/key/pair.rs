use crate::{
    kem::{errors::KemErrors, r3::R3, rq::Rq},
    random::NTRURandom,
};

use super::{priv_key::PrivKey, pub_key::PubKey};

pub struct KeyPair<const P: usize, const Q: usize, const Q12: usize> {
    pub pub_key: PubKey<P, Q, Q12>,
    pub priv_key: PrivKey<P, Q, Q12>,
}

impl<const P: usize, const Q: usize, const Q12: usize> KeyPair<P, Q, Q12> {
    pub fn new() -> Self {
        Self {
            pub_key: PubKey::new(),
            priv_key: PrivKey::new(),
        }
    }

    // h,(f,ginv)
    pub fn from_seed(&self, g: R3<P, Q, Q12>, f: R3<P, Q, Q12>) -> Result<Self, KemErrors> {
        let finv = f.recip3()?;
        let ginv = g.recip()?;
        let mut h: Rq<P, Q, Q12> = Rq::new();

        h.mult_small(&finv, &g);

        Ok(Self {
            priv_key: PrivKey::from(f, ginv),
            pub_key: PubKey::from(h),
        })
    }
}

#[cfg(test)]
mod test_pair {
    use super::*;

    #[test]
    fn test_key_gen_from_seed() {
        const P: usize = 761;
        const Q: usize = 4591;
        const Q12: usize = (Q - 1) / 2;

        let pair: KeyPair<P, Q, Q12> = KeyPair::new();
        let f: R3<P, Q, Q12> = R3::from([
            0, 0, 1, 0, 0, 0, 0, -1, 0, 1, 0, -1, 0, -1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -1, 1, 0, 0,
            1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 1, 0, -1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
            0, 1, 0, 1, 0, 0, 0, 0, -1, 1, 0, 0, -1, 0, 0, 0, 0, 1, -1, 0, -1, 0, -1, 0, 1, 0, 0,
            0, 1, 0, -1, -1, 0, 0, 0, 0, 0, -1, -1, 1, 0, 1, 0, -1, 1, 1, 1, -1, 1, -1, 0, 0, -1,
            0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0,
            -1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 0, 0, -1, -1, 0, 1, 0, -1, 1, 0, 0, 1, 0,
            0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, -1, -1, 0, -1, 0, 0, 0, 1, -1, 1, 0, 1,
            0, 0, 1, 0, 0, -1, 0, -1, 0, 0, 0, -1, 1, 0, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1,
            1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, -1, 0,
            0, 0, 1, 0, 0, -1, 0, 0, 1, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 1,
            1, -1, -1, 0, 1, 0, 0, 0, 0, -1, 0, -1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            -1, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 1, 0, -1, 1, 0, 0, 0, 0, 0, 0, -1, 1, 1, 0, 0,
            1, 1, -1, 1, 0, -1, 1, 0, -1, 1, -1, 0, 1, 0, 0, 0, -1, 1, 0, 1, -1, -1, 0, 1, 0, 0, 0,
            0, 0, 0, 0, 1, 0, -1, 0, -1, 1, 0, 0, 0, 0, 0, 1, -1, 1, 0, 0, 1, 0, 1, 1, 0, 0, -1, 0,
            0, 1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 0, 1, 0, 0,
            0, -1, 1, -1, 1, 1, 0, 0, 0, 0, 1, 1, -1, -1, 1, 0, 0, 0, -1, 0, 1, -1, 0, 0, -1, -1,
            -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, -1, 1, 1, 1, 0, 0, 1, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0, 0, -1, 0, -1, 0, -1, 1,
            1, 0, 0, 0, -1, 0, 0, 1, 0, 0, -1, -1, -1, -1, -1, 0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
            0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 1, 1, 1, -1, 0, -1, 0, 0, 1, 0,
            0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0,
            0, 0, -1, 0, 0, 0, 0, 1, 1, 1, 0, 0, -1, 1, 0, 0, 0, 1, 0, 1, 0, -1, 0, 1, -1, 0, 0, 1,
            -1, -1, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 1, -1, 0, 0, 0, 0, -1, 0, 1, 0, 0, 1, 1, 1, -1,
            0, 1, 0, 1, 0, -1, 0, -1, 0, 0, 1, 0, -1, 0, 1, 1, 0, 1, 1, 0, -1, 0, 1, -1, 0, 0, 0,
            -1, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, -1, -1, -1, -1, -1, 1, 0, -1, 0, 0, 0, 0, 0,
            0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            -1, 1, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0,
        ]);
        let g: R3<P, Q, Q12> = R3::from([
            1, 0, 0, -1, 0, 0, 0, 1, -1, 0, 0, 0, -1, 1, 0, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, -1,
            0, -1, -1, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0,
            0, 0, 0, 1, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 1, 0, 1, 0, 0, 1, -1, 0, 0, 0, 1, 0, 0, 0,
            0, 0, 0, 1, 0, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, 1, 0, 0,
            0, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0,
            0, 0, 1, 0, 0, 0, 0, 1, -1, 0, 1, -1, 0, -1, 1, 0, 0, 0, 1, 1, 0, -1, 1, 1, 0, 0, 0, 0,
            0, 0, 1, 0, -1, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, -1,
            -1, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
            0, 1, 1, -1, 0, 0, 0, -1, 1, 0, 0, 0, 1, -1, 1, -1, 0, 1, -1, 0, 0, -1, -1, -1, 1, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, -1, 1, -1, 1, -1, -1, 0, 0, 0, 0, 0, -1,
            0, 1, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 1, -1, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 1, 1, 1, -1, -1, 0, 0, -1, 0, 0, 0,
            1, 0, -1, -1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, -1, 0, 0, 1, 1, 0, -1, 0, 1, -1, 0, 0,
            0, 1, 0, -1, 0, 0, -1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 1, 0, 1, 0, 0,
            -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 1, -1, 0, -1, 0, -1, 1, 0, 0, -1, -1, 1, 0,
            1, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, 0,
            1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, -1, 0, 1, 0, 1, 0, 0, 0, -1, 0, 0, -1, 0,
            -1, -1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, -1, -1, 1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0,
            1, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            -1, -1, 0, 0, 0, -1, 0, 1, 0, 0, -1, -1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0,
            0, 1, 0, 1, 0, -1, -1, 0, 0, -1, 1, 1, -1, 0, 0, 0, 1, 0, -1, -1, 1, 0, 0, 1, 0, 0, 0,
            -1, 0, 0, 0, -1, -1, 1, 0, 0, -1, 0, -1, -1, -1, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, -1, 0,
            0, 0, 0, 0, 0, -1, 1, -1, -1, 0, 1, -1, 0, -1, 0, 0, 1, 0, 0, -1, 0, 1, 0, 0, 0, -1, 1,
            1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, 0, 0,
            1, 0, -1, 0, 0, -1, -1, 0, 1, -1, -1, 0, -1, 0, 0, 0, 1, 0, -1, 1, 0, 1, 1, -1, 0, 0,
            0, 1, 1, -1, 0, 1, -1, 0, -1, 0, 0, -1, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1,
            1, 0, 0, 1, -1, -1, 0, 1, 0, 0, 1, 1, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
            0,
        ]);

        pair.from_seed(g, f).unwrap();
    }
}
