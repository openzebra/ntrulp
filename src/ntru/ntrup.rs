use super::{errors::NTRUErrors, params::check_params};
use crate::{
    kem::{f3::round, r3::R3, rq::Rq},
    key::pair::KeyPair,
    math::nums::weightw_mask,
    random::{CommonRandom, NTRURandom},
};
use sha2::{Digest, Sha512};

pub struct NTRUPrime<const P: usize, const Q: usize, const W: usize, const Q12: usize> {
    pub key_pair: KeyPair<P, Q, Q12>,
    pub rng: NTRURandom<P>,
}

impl<const P: usize, const Q: usize, const W: usize, const Q12: usize> NTRUPrime<P, Q, W, Q12> {
    pub fn new() -> Result<Self, NTRUErrors> {
        check_params::<P, Q, W, Q12>()?;

        let rng: NTRURandom<P> = NTRURandom::new();
        let key_pair: KeyPair<P, Q, Q12> = KeyPair::new();

        Ok(NTRUPrime { rng, key_pair })
    }

    pub fn encrypt(&self, r: &R3<P, Q, Q12>) -> Rq<P, Q, Q12> {
        let h = &self.key_pair.pub_key.h;
        let hr = h.mult_small(&r);
        let hr_rounded = round(&hr.coeffs);

        Rq::from(hr_rounded)
    }

    pub fn decrypt(&self, c: &Rq<P, Q, Q12>) -> R3<P, Q, Q12> {
        let f = &self.key_pair.priv_key.f;
        let ginv = &self.key_pair.priv_key.ginv;
        let mut r = [0i8; P];
        let cf: Rq<P, Q, Q12> = c.mult_small(&f.r3_from_rq());
        let cf3: Rq<P, Q, Q12> = cf.mult3();
        let e: R3<P, Q, Q12> = cf3.r3_from_rq();
        let ev: R3<P, Q, Q12> = e.mult(&ginv);
        #[allow(unused_assignments)]
        let mut mask: i16 = 0;

        mask = weightw_mask::<P, W>(&ev.coeffs); // 0 if weight w, else -1

        for i in 0..W {
            r[i] = (((ev.coeffs[i] ^ 1) as i16 & !mask) ^ 1) as i8;
        }

        for i in W..P {
            r[i] = (ev.coeffs[i] as i16 & !mask) as i8;
        }

        R3::from(r)
    }

    pub fn key_pair_gen(&mut self) -> Result<(), NTRUErrors> {
        const MAX_TRY: usize = 100;

        let mut k: usize = 0;

        loop {
            if k >= MAX_TRY {
                return Err(NTRUErrors::KeyPairGen);
            }

            let short_entropy = match self.rng.short_random(W) {
                Ok(s) => s,
                Err(_) => {
                    k += 1;
                    continue;
                }
            };
            let small_entropy = match self.rng.random_small() {
                Ok(s) => s,
                Err(_) => {
                    k += 1;
                    continue;
                }
            };
            let f: Rq<P, Q, Q12> = Rq::from(short_entropy);
            let g: R3<P, Q, Q12> = R3::from(small_entropy);

            match self.key_pair.from_seed(g, f) {
                Ok(_) => self.key_pair.verify(),
                Err(_) => {
                    k += 1;
                    continue;
                }
            };

            break;
        }

        Ok(())
    }

    pub fn set_key_pair(&mut self, key_pair: KeyPair<P, Q, Q12>) {
        self.key_pair = key_pair;
    }

    fn hash_prefix(&self, b: u8, input: &[u8], length: usize) -> [u8; 32] {
        let ext_len = length + 1;
        let mut out = [0u8; 32];
        let mut x = vec![0u8; ext_len];

        x[0] = b;

        for i in 0..length {
            x[i + 1] = match input.get(i) {
                Some(&v) => v,
                None => continue,
            };
        }

        let mut hasher = Sha512::new();
        hasher.update(&x[..ext_len]);
        let hash_result = hasher.finalize();

        out.copy_from_slice(&hash_result[..32]);

        out
    }

    fn hash_confirm(&self, r_enc: &[u8], cache: &[u8]) -> [u8; 32] {
        let mut x = [0u8; 64];

        x[..32].copy_from_slice(&self.hash_prefix(3, &r_enc, r_enc.len() + 1));

        for i in 0..32 {
            x[32 + i] = cache[i];
        }

        self.hash_prefix(2, &x, x.len())
    }
}

#[cfg(test)]
mod tests {
    use super::NTRUPrime;
    use crate::{
        kem::{r3::R3, rq::Rq},
        random::{CommonRandom, NTRURandom},
    };

    #[test]
    fn test_init_params() {
        NTRUPrime::<761, 4591, 286, 4590>::new().unwrap();
        NTRUPrime::<857, 5167, 322, 5166>::new().unwrap();
        NTRUPrime::<653, 4621, 288, 4620>::new().unwrap();
        NTRUPrime::<953, 6343, 396, 6342>::new().unwrap();
        NTRUPrime::<1013, 7177, 448, 7176>::new().unwrap();
        NTRUPrime::<1277, 7879, 492, 7878>::new().unwrap();
    }

    #[test]
    fn test_gen_key_pair() {
        let mut ntrup = NTRUPrime::<761, 4591, 286, 4590>::new().unwrap();

        ntrup.key_pair_gen().unwrap();

        assert!(ntrup.key_pair.verify());

        let mut ntrup = NTRUPrime::<857, 5167, 322, 5166>::new().unwrap();

        ntrup.key_pair_gen().unwrap();

        assert!(ntrup.key_pair.verify());

        let mut ntrup = NTRUPrime::<653, 4621, 288, 4620>::new().unwrap();

        ntrup.key_pair_gen().unwrap();

        assert!(ntrup.key_pair.verify());

        let mut ntrup = NTRUPrime::<953, 6343, 396, 6342>::new().unwrap();

        ntrup.key_pair_gen().unwrap();

        assert!(ntrup.key_pair.verify());

        let mut ntrup = NTRUPrime::<1013, 7177, 448, 7176>::new().unwrap();

        ntrup.key_pair_gen().unwrap();

        assert!(ntrup.key_pair.verify());

        let mut ntrup = NTRUPrime::<1277, 7879, 492, 7878>::new().unwrap();

        ntrup.key_pair_gen().unwrap();

        assert!(ntrup.key_pair.verify());
    }

    #[test]
    fn test_decrpt_encrypt() {
        const P: usize = 761;
        const Q: usize = 4591;
        const W: usize = 286;
        const Q12: usize = (Q - 1) / 2;

        let mut ntrup = NTRUPrime::<P, Q, W, Q12>::new().unwrap();

        ntrup.key_pair_gen().unwrap();

        for _ in 0..10 {
            let mut rng: NTRURandom<P> = NTRURandom::new();
            let c: R3<P, Q, Q12> = Rq::from(rng.short_random(W).unwrap()).r3_from_rq();
            let encrypted = ntrup.encrypt(&c);
            let decrypted = ntrup.decrypt(&encrypted);

            assert_eq!(decrypted.coeffs, c.coeffs);
        }
    }

    #[test]
    fn test_hash_prefix() {
        const P: usize = 761;
        const Q: usize = 4591;
        const W: usize = 286;
        const Q12: usize = (Q - 1) / 2;

        let ntrup = NTRUPrime::<P, Q, W, Q12>::new().unwrap();
        let pk = [
            148, 232, 167, 6, 238, 154, 62, 139, 23, 188, 44, 203, 145, 105, 86, 35, 189, 81, 53,
            178, 171, 60, 192, 127, 239, 95, 223, 9, 178, 184, 213, 241, 44, 9, 220, 93, 34, 87,
            143, 22, 146, 124, 38, 235, 225, 196, 21, 139, 53, 177, 255, 16, 0, 30, 72, 77, 253,
            18, 23, 167, 56, 27, 142, 6, 102, 3, 231, 50, 63, 47, 161, 100, 197, 198, 61, 46, 94,
            87, 66, 233, 193, 219, 89, 40, 124, 97, 109, 155, 247, 54, 66, 4, 87, 96, 66, 90, 93,
            193, 219, 116, 170, 73, 100, 204, 205, 31, 183, 185, 127, 170, 201, 234, 88, 135, 208,
            76, 54, 183, 253, 255, 168, 159, 95, 179, 7, 204, 51, 220, 15, 157, 28, 26, 114, 142,
            237, 241, 35, 225, 96, 118, 110, 134, 143, 65, 3, 157, 75, 234, 202, 194, 239, 236,
            108, 76, 31, 222, 42, 39, 195, 244, 103, 57, 207, 222, 82, 166, 154, 236, 108, 220,
            155, 6, 34, 70, 73, 132, 9, 114, 54, 68, 89, 141, 252, 89, 167, 83, 20, 249, 51, 196,
            192, 5, 128, 219, 127, 241, 83, 72, 238, 177, 167, 107, 246, 103, 198, 52, 171, 75,
            159, 69, 115, 225, 205, 237, 168, 199, 173, 181, 211, 207, 126, 114, 60, 141, 98, 171,
            189, 70, 5, 143, 248, 126, 25, 56, 218, 185, 226, 158, 174, 217, 167, 51, 239, 109, 62,
            209, 100, 251, 90, 145, 224, 28, 229, 237, 217, 252, 28, 240, 58, 226, 70, 31, 69, 231,
            78, 40, 130, 57, 172, 95, 149, 178, 54, 49, 0, 105, 152, 147, 9, 184, 89, 178, 87, 17,
            154, 160, 231, 152, 231, 137, 30, 105, 109, 176, 210, 220, 23, 25, 133, 155, 112, 83,
            4, 47, 83, 122, 19, 3, 101, 165, 168, 213, 161, 158, 164, 203, 226, 17, 83, 23, 125,
            163, 227, 97, 8, 21, 5, 108, 147, 183, 70, 225, 110, 216, 241, 8, 125, 244, 232, 146,
            174, 26, 120, 57, 21, 162, 236, 44, 162, 172, 116, 95, 56, 52, 4, 101, 231, 188, 113,
            221, 188, 47, 7, 105, 46, 124, 218, 80, 241, 158, 173, 15, 87, 122, 91, 255, 93, 159,
            210, 126, 223, 168, 190, 169, 136, 240, 74, 210, 45, 234, 140, 2, 15, 90, 48, 62, 179,
            208, 39, 174, 136, 191, 179, 232, 219, 150, 227, 234, 223, 70, 123, 171, 121, 185, 86,
            36, 243, 16, 164, 193, 172, 61, 121, 69, 50, 61, 6, 149, 136, 213, 34, 169, 200, 100,
            11, 4, 101, 16, 50, 172, 177, 180, 110, 240, 66, 253, 174, 201, 133, 52, 137, 27, 195,
            79, 252, 202, 195, 82, 51, 231, 188, 32, 60, 219, 49, 154, 15, 220, 182, 180, 239, 105,
            235, 131, 173, 90, 236, 77, 80, 139, 200, 171, 125, 123, 121, 165, 94, 241, 245, 168,
            161, 109, 0, 18, 126, 184, 250, 51, 102, 60, 124, 56, 45, 38, 76, 216, 138, 91, 6, 99,
            137, 39, 177, 154, 94, 78, 30, 35, 182, 105, 26, 252, 52, 214, 82, 125, 99, 51, 202,
            129, 240, 12, 64, 56, 71, 40, 178, 186, 38, 180, 92, 238, 69, 14, 85, 164, 250, 21, 63,
            35, 242, 115, 2, 232, 8, 179, 245, 57, 214, 124, 44, 119, 211, 76, 191, 242, 49, 113,
            34, 60, 161, 42, 1, 151, 21, 171, 138, 246, 121, 158, 248, 238, 197, 20, 231, 205, 6,
            178, 138, 229, 238, 69, 202, 211, 212, 99, 233, 254, 238, 184, 177, 75, 66, 174, 91,
            20, 20, 41, 20, 144, 85, 172, 101, 66, 126, 192, 246, 254, 217, 6, 90, 1, 125, 222,
            179, 172, 197, 184, 194, 131, 251, 81, 183, 1, 147, 93, 84, 47, 193, 245, 41, 207, 2,
            189, 235, 244, 236, 1, 220, 174, 11, 147, 57, 214, 21, 98, 25, 50, 77, 142, 72, 31, 41,
            28, 94, 166, 179, 19, 244, 137, 95, 14, 213, 244, 223, 2, 237, 123, 74, 108, 141, 233,
            51, 73, 210, 73, 172, 47, 149, 100, 27, 201, 146, 252, 219, 244, 165, 181, 35, 248, 81,
            247, 87, 23, 151, 205, 158, 174, 225, 73, 115, 67, 164, 16, 200, 144, 19, 244, 81, 81,
            51, 100, 89, 240, 227, 116, 33, 43, 136, 92, 177, 158, 30, 173, 183, 90, 167, 230, 51,
            230, 31, 171, 122, 255, 109, 184, 110, 116, 177, 190, 112, 187, 250, 53, 107, 46, 200,
            28, 90, 233, 17, 146, 111, 209, 65, 54, 226, 22, 154, 243, 51, 178, 235, 81, 66, 206,
            33, 76, 122, 77, 164, 252, 60, 122, 189, 201, 158, 249, 56, 47, 128, 140, 39, 208, 14,
            223, 181, 254, 124, 54, 135, 176, 184, 233, 71, 133, 198, 166, 220, 99, 101, 149, 48,
            217, 145, 161, 140, 182, 127, 12, 249, 247, 51, 60, 108, 105, 150, 203, 77, 65, 224,
            21, 6, 125, 33, 53, 78, 98, 60, 27, 18, 49, 188, 87, 115, 250, 23, 128, 10, 6, 251, 89,
            223, 145, 134, 7, 235, 131, 48, 154, 177, 187, 244, 192, 194, 102, 168, 154, 190, 120,
            220, 113, 40, 61, 73, 49, 159, 118, 186, 78, 185, 146, 108, 243, 178, 101, 212, 45,
            199, 248, 252, 243, 65, 222, 53, 117, 220, 212, 250, 171, 213, 17, 154, 135, 87, 226,
            103, 149, 244, 207, 212, 94, 42, 166, 165, 82, 7, 157, 13, 202, 171, 26, 244, 89, 57,
            49, 224, 54, 88, 143, 42, 122, 113, 216, 31, 150, 21, 119, 141, 173, 91, 112, 225, 45,
            240, 4, 167, 231, 55, 35, 227, 227, 111, 100, 58, 1, 250, 171, 81, 211, 170, 72, 125,
            119, 50, 22, 131, 52, 93, 143, 255, 147, 250, 156, 17, 107, 18, 185, 132, 254, 188,
            148, 65, 235, 210, 223, 66, 145, 6, 74, 194, 124, 209, 60, 209, 184, 214, 154, 83, 71,
            143, 198, 148, 97, 2, 35, 12, 7, 228, 105, 170, 108, 127, 20, 69, 226, 200, 162, 119,
            127, 176, 157, 99, 87, 104, 174, 155, 27, 38, 210, 68, 148, 169, 146, 155, 96, 249,
            120, 187, 86, 237, 242, 132, 162, 173, 236, 210, 209, 254, 100, 16, 70, 80, 237, 24,
            19, 3, 181, 40, 15, 39, 106, 163, 125, 86, 30, 83, 211, 199, 177, 48, 189, 0, 108, 55,
            119, 6, 100, 40, 126, 222, 112, 138, 195, 34, 141, 12, 229, 172, 215, 196, 50, 76, 156,
            42, 190, 28, 238, 148, 146, 183, 3, 87, 34, 91, 79, 195, 214, 28, 134, 94, 192, 207,
            110, 21, 214, 21, 160, 19, 60, 115, 253, 31, 49, 35, 227, 30, 118, 136, 235, 130, 57,
            252, 149, 128, 239, 108, 192, 86, 48, 232, 53, 16, 123, 166, 204, 88, 243, 221, 92, 7,
            106, 116, 116, 90, 135, 202, 2,
        ];
        let cache = ntrup.hash_prefix(4, &pk, pk.len());

        assert_eq!(
            cache,
            [
                248, 23, 27, 211, 104, 26, 11, 189, 90, 247, 157, 99, 234, 214, 235, 129, 37, 255,
                133, 231, 15, 147, 110, 231, 205, 90, 154, 223, 131, 179, 57, 98,
            ]
        );

        let r_enc: [u8; 190] = [
            222, 186, 79, 121, 25, 137, 67, 75, 68, 147, 154, 85, 228, 55, 0, 27, 1, 11, 8, 13,
            189, 11, 136, 143, 64, 153, 116, 221, 92, 2, 193, 228, 222, 186, 79, 121, 25, 137, 67,
            75, 68, 147, 154, 85, 228, 55, 0, 27, 1, 11, 8, 13, 189, 11, 136, 143, 64, 153, 116,
            221, 92, 2, 193, 228, 222, 186, 79, 121, 25, 137, 67, 75, 68, 147, 154, 85, 228, 55, 0,
            222, 186, 79, 121, 25, 137, 67, 75, 68, 147, 154, 85, 228, 55, 0, 27, 1, 11, 8, 13,
            189, 11, 136, 143, 64, 153, 116, 221, 92, 2, 193, 228, 27, 1, 11, 8, 13, 189, 11, 136,
            143, 64, 153, 116, 221, 92, 2, 193, 228, 143, 64, 153, 116, 221, 92, 2, 193, 228, 143,
            64, 153, 116, 221, 92, 2, 193, 228, 143, 64, 153, 116, 221, 92, 2, 193, 228, 143, 64,
            153, 116, 221, 92, 2, 193, 228, 143, 64, 153, 116, 221, 92, 2, 193, 228, 143, 64, 153,
            116, 221, 92, 2, 193, 228, 143, 64, 153, 116, 221, 92, 2, 193,
        ];

        let res = ntrup.hash_confirm(&r_enc, &cache);

        assert_eq!(
            res,
            [
                154, 155, 118, 236, 42, 121, 118, 231, 236, 47, 215, 163, 32, 114, 112, 253, 81,
                66, 202, 132, 229, 50, 162, 209, 12, 253, 25, 230, 194, 94, 209, 30,
            ]
        );
    }
}
