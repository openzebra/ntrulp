#[cfg(feature = "ntrulpr1013")]
use crate::params::params1013::{
    CIPHERTEXTS_BYTES, HASH_BYTES, INPUTS_BYTES, P, PUBLICKEYS_BYTES, Q, Q12, ROUNDED_BYTES,
    SEEDS_BYTES, SMALL_BYTES, W,
};
#[cfg(feature = "ntrulpr1277")]
use crate::params::params1277::{
    CIPHERTEXTS_BYTES, HASH_BYTES, INPUTS_BYTES, P, PUBLICKEYS_BYTES, Q, Q12, ROUNDED_BYTES,
    SEEDS_BYTES, SMALL_BYTES, W,
};
#[cfg(feature = "ntrulpr653")]
use crate::params::params653::{
    CIPHERTEXTS_BYTES, HASH_BYTES, INPUTS_BYTES, P, PUBLICKEYS_BYTES, Q, Q12, ROUNDED_BYTES,
    SEEDS_BYTES, SMALL_BYTES, W,
};
#[cfg(feature = "ntrulpr761")]
use crate::params::params761::{
    CIPHERTEXTS_BYTES, HASH_BYTES, INPUTS_BYTES, P, PUBLICKEYS_BYTES, Q, Q12, SEEDS_BYTES,
    SMALL_BYTES, W,
};
#[cfg(feature = "ntrulpr857")]
use crate::params::params857::{
    CIPHERTEXTS_BYTES, HASH_BYTES, INPUTS_BYTES, P, PUBLICKEYS_BYTES, Q, Q12, ROUNDED_BYTES,
    SEEDS_BYTES, SMALL_BYTES, W,
};
#[cfg(feature = "ntrulpr953")]
use crate::params::params953::{
    CIPHERTEXTS_BYTES, HASH_BYTES, INPUTS_BYTES, P, PUBLICKEYS_BYTES, Q, Q12, ROUNDED_BYTES,
    SEEDS_BYTES, SMALL_BYTES, W,
};

use super::{cipher::z_encrypt, errors::NTRUErrors};
use crate::{
    encode::{r3, sort::crypto_sort_u32, top::inputs_encode},
    math::nums::u32_mod_u14,
    ntru::aes::aes256_ctr_crypto_stream,
    poly::r3::R3,
};
use sha2::{Digest, Sha512};

pub fn expand(k: &[u8; SEEDS_BYTES]) -> Result<[u32; P], NTRUErrors<'static>> {
    let out = match aes256_ctr_crypto_stream(k) {
        Ok(o) => o,
        Err(_) => return Err(NTRUErrors::LPRExpandError("aes error")),
    };

    Ok(out)
}

pub fn generator(k: &[u8; SEEDS_BYTES]) -> Result<[i16; P], NTRUErrors<'static>> {
    let l = expand(k)?;
    let mut g = [0i16; P];

    for i in 0..P {
        let value = u32_mod_u14(l[i], Q as u16);

        g[i] = value as i16 - Q12 as i16;
    }

    Ok(g)
}

pub fn short_fromlist(input: &[u32; P]) -> [i8; P] {
    let mut out = [0i8; P];
    let mut l = [0u32; P];

    for i in 0..W {
        l[i] = input[i] & 0xfffffffe;
    }
    for i in W..P {
        l[i] = (input[i] & 0xfffffffd) | 1;
    }
    crypto_sort_u32::<P>(&mut l);
    for i in 0..P {
        out[i] = (l[i] & 3) as i8 - 1;
    }

    out
}

pub fn hash_short(r: &[i8; P]) -> Result<[i8; P], NTRUErrors<'static>> {
    const LEN: usize = HASH_BYTES + 1;

    let s = inputs_encode(r);
    let h = hash_prefix::<LEN, HASH_BYTES>(5, &s);
    let l = expand(&h)?;
    let out = short_fromlist(&l);

    Ok(out)
}

pub fn hash_prefix<const LENGTH: usize, const OUT_SIZE: usize>(
    b: u8,
    input: &[u8; OUT_SIZE],
) -> [u8; HASH_BYTES] {
    let mut out = [0u8; HASH_BYTES];
    let mut x = [0u8; LENGTH];

    x[0] = b;

    for i in 0..LENGTH - 1 {
        x[i + 1] = match input.get(i) {
            Some(&v) => v,
            None => continue,
        };
    }

    let mut hasher = Sha512::new();
    hasher.update(&x[..LENGTH]);
    let hash_result = hasher.finalize();

    out.copy_from_slice(&hash_result[..HASH_BYTES]);

    out
}

fn hash_confirm(r_enc: &[u8; SMALL_BYTES], cache: &[u8; HASH_BYTES]) -> [u8; HASH_BYTES] {
    const SHA512_SIZE: usize = HASH_BYTES * 2;
    const LENGTH: usize = SMALL_BYTES + 1;
    const SHA_LENGTH: usize = SHA512_SIZE + 1;
    let mut x = [0u8; SHA512_SIZE];

    x[..HASH_BYTES].copy_from_slice(&hash_prefix::<LENGTH, SMALL_BYTES>(3, &r_enc));
    x[HASH_BYTES..].copy_from_slice(cache);

    hash_prefix::<SHA_LENGTH, SHA512_SIZE>(2, &x)
}

fn hide(
    r: &R3,
    cache: &[u8; HASH_BYTES],
    pk: &[u8; PUBLICKEYS_BYTES],
) -> Result<([u8; CIPHERTEXTS_BYTES + HASH_BYTES], [u8; SMALL_BYTES]), NTRUErrors<'static>> {
    let r_enc = r3::r3_encode(&r.coeffs);
    let mut bytes: [u8; CIPHERTEXTS_BYTES + HASH_BYTES] = z_encrypt(r, &pk)?;
    dbg!(&cache);
    let gamma = hash_confirm(&r_enc, cache);

    bytes[CIPHERTEXTS_BYTES..].copy_from_slice(&gamma);

    Ok((bytes, r_enc))
}

fn hash_session(
    b: u8,
    y: &[u8; HASH_BYTES],
    z: &[u8; CIPHERTEXTS_BYTES + HASH_BYTES],
) -> [u8; HASH_BYTES] {
    const LENGTH_X: usize = CIPHERTEXTS_BYTES + INPUTS_BYTES * 2;
    const LENGTH_X_EX: usize = LENGTH_X + 1;

    let mut x = [0u8; LENGTH_X];

    x[..INPUTS_BYTES].copy_from_slice(y);
    x[INPUTS_BYTES..].copy_from_slice(z);

    hash_prefix::<LENGTH_X_EX, LENGTH_X>(b, &x)
}

#[test]
fn test_hash_short() {
    let r = R3::from([
        1, 0, 0, 0, 1, 0, 0, 1, -1, -1, -1, 0, 0, -1, 0, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1,
        0, 1, 1, 1, -1, -1, 1, 1, 0, 0, -1, -1, 1, -1, 0, -1, -1, -1, 1, 0, 0, 1, 0, 0, -1, 1, -1,
        0, 1, -1, 0, 0, -1, 1, 0, 1, -1, 1, 1, 0, 0, 1, -1, 1, 0, 0, -1, 0, 1, -1, 1, 0, 0, -1, 0,
        0, 0, 0, -1, -1, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0, 1, 1, 1, 0, -1, 0, -1, 0, -1, -1, 0,
        -1, 1, 1, 1, 1, -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, -1, 1, -1, 0, 0, 0, -1, -1, 0, 1,
        1, 1, 1, 1, 0, 0, 0, 1, 0, 0, -1, -1, -1, -1, 1, -1, 0, -1, 1, -1, -1, 0, 1, -1, 0, 1, -1,
        -1, 1, 0, 0, 1, 1, 1, 1, -1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, -1, 0, -1, -1, 0, 0, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 0, 1, 0, 0, -1, 1, -1, 1, -1, 1, -1, 1, 0, 1, 1, 0, -1, 1, -1, 1, 0, -1, 0,
        0, 1, 1, -1, -1, 0, 1, -1, -1, 0, 1, -1, 0, -1, 0, -1, -1, 0, -1, 1, 1, -1, 1, 0, 1, 1, 1,
        1, 0, 0, -1, 1, -1, 1, 1, 1, -1, -1, 0, 1, 1, -1, 0, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1,
        -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, 0, 1, 0, -1, -1, 0, -1, 0, 0, 1, 1, 0, -1, 1, 0, 0,
        -1, 0, 1, 1, 0, -1, 0, 1, 1, 0, 0, -1, 1, 1, 0, 1, -1, 0, 0, 1, 0, 0, -1, -1, 1, 0, -1, -1,
        -1, 1, 1, 0, 1, 0, -1, -1, -1, 1, -1, -1, 0, -1, -1, 1, 1, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        1, 0, -1, 1, -1, -1, 0, 1, 1, -1, 0, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 0, -1, 0, 0, -1,
        -1, -1, 1, 0, -1, 1, -1, 1, 1, -1, -1, 0, -1, 0, -1, 1, 1, 1, 0, -1, 1, -1, 0, 0, 1, 1, 1,
        -1, -1, -1, -1, 1, 1, -1, 0, 0, 1, 1, 0, 0, 0, -1, 1, -1, -1, -1, 1, 1, 0, -1, -1, 0, 1, 1,
        0, 0, 1, -1, 1, 1, 1, 1, -1, 1, 0, 0, 1, 1, 0, -1, -1, 1, -1, 0, 1, -1, -1, 1, 0, -1, 0, 0,
        -1, 0, -1, -1, 1, 0, 1, 0, 0, 0, -1, -1, 1, 1, -1, 1, 0, 1, -1, 1, 1, 1, -1, 0, 0, 0, 0,
        -1, -1, 0, 1, 0, 1, 1, -1, 0, 0, 1, -1, 1, -1, 0, -1, 1, 0, 0, 1, 1, 1, -1, 0, -1, -1, 0,
        -1, 0, 0, -1, 1, -1, 1, -1, 0, 0, -1, 1, 0, -1, 0, 1, 0, 0, -1, 0, -1, 0, 0, 1, 1, -1, -1,
        1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 0, 0, -1, 1, 1, 1, 1, 0, -1, 1, 1, -1, 0, -1, 1, -1, 1, 0,
        1, -1, 1, 1, -1, 0, 1, 1, -1, 0, -1, -1, 1, 1, 0, -1, -1, 0, 1, 0, -1, 1, 1, 1, 1, 1, 1,
        -1, 0, 0, 1, -1, 1, 0, -1, 1, 0, 1, 0, 1, 0, 0, 0, 1, -1, 1, 0, -1, 1, 0, 0, -1, -1, 0, -1,
        0, 1, 0, 0, 0, -1, 0, 1, 1, 1, 1, 1, 0, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 0, 0, -1, 0, 0,
        -1, 1, -1, 1, 0, 0, 0, 0, 0, 1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1,
        -1, -1, 1, -1, -1, 1, 0, -1, -1, -1, 0, 1, 0, -1, 0, -1, -1, 0, 0, -1, 0, -1, -1, 0, 0, -1,
        1, 1, 0, -1, 0, -1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 0, 1, -1, 0, 1, -1, 1, 1, -1, -1, 1, 0,
        -1, -1, -1, 0, 0, 1, -1, 1, -1, 0, -1, 1, -1, 0, 0, 1, 1, 0, -1, -1, -1, 1, 1, -1, -1, 1,
        -1,
    ]);
    let out = hash_short(&r.coeffs).unwrap();

    assert_eq!(
        out,
        [
            0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1, -1, 0, -1, 0, 0, 0, -1,
            0, 0, 0, 0, 1, 0, -1, 1, 0, 0, 0, 1, -1, 1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 1, -1, 0, 0,
            0, 0, 1, -1, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 1, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 1, -1, 1,
            0, 1, 1, 0, -1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, -1,
            0, -1, 0, 1, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 1, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0,
            0, 1, 0, 0, -1, 0, -1, -1, -1, 0, -1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
            0, 0, 1, 0, 1, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, -1, 1, 0, -1, 0, -1,
            0, -1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 1, -1, 1, 1, 0, -1, 1, 0, 0, 1, 0,
            0, 0, -1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, -1, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0,
            0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 0, 1, -1, 0, -1, 0, 0, 0, 0, 0,
            0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, -1, 1, 0, 1, 0, 0, -1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 1, -1, 0,
            0, 0, 1, -1, 1, -1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, -1, 0, -1, 0, -1, 0, 0, 0, 1, -1, 0,
            0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, -1, 0, 0, 1,
            0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, -1, 1, 1, 1, 0, 0, -1, 0, -1,
            0, 0, -1, 0, 0, 0, 0, 1, 1, -1, 0, 1, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1, -1, 1, 0, 0, 0,
            0, 1, 0, -1, 0, -1, 0, 0, -1, 0, -1, 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, -1, 0, 1, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 1, 0,
            1, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 1, 1, 0, 1, -1, -1, 1, 0, 0,
            0, 1, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, 0, 0, 1, 1, -1, 0, 0, 0, -1, 0, 0, -1, 0, 1, -1,
            0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, -1, 1, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1,
            1, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
            0, 0, -1, 1, 0, 0, 1, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0,
            0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
            -1, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, -1, 1, -1, 0, 0, 0, -1, 1, 0, 0, 0, 0, -1,
            0, -1, 0, 0, -1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,
        ]
    );
}

#[cfg(feature = "ntrulpr761")]
#[test]
fn test_hash_confirm() {
    let r_enc: [u8; SMALL_BYTES] = [
        86, 150, 64, 145, 8, 42, 64, 42, 104, 129, 4, 88, 22, 146, 20, 38, 90, 98, 145, 88, 84,
        129, 150, 68, 165, 70, 4, 161, 74, 5, 85, 129, 84, 144, 170, 149, 5, 32, 33, 36, 9, 150,
        42, 90, 102, 73, 80, 106, 169, 102, 33, 34, 166, 33, 70, 41, 36, 36, 17, 132, 98, 170, 133,
        168, 144, 146, 32, 40, 66, 16, 0, 25, 68, 105, 88, 164, 145, 22, 154, 148, 5, 6, 104, 6, 8,
        129, 82, 85, 150, 33, 164, 36, 160, 160, 81, 128, 33, 10, 17, 106, 72, 169, 0, 74, 105,
        133, 128, 6, 105, 137, 42, 150, 6, 146, 96, 20, 129, 89, 129, 98, 162, 82, 5, 153, 82, 34,
        97, 169, 4, 81, 136, 20, 70, 22, 81, 10, 170, 168, 90, 168, 134, 18, 98, 162, 164, 4, 26,
        100, 168, 42, 37, 134, 153, 149, 24, 22, 68, 86, 164, 106, 34, 128, 82, 20, 98, 85, 6, 16,
        64, 81, 128, 96, 64, 70, 80, 4, 133, 70, 64, 1, 149, 36, 10, 6, 148, 72, 72, 105, 128, 130,
        0,
    ];
    let cache: [u8; HASH_BYTES] = [
        151, 153, 142, 125, 236, 255, 169, 87, 52, 34, 151, 78, 0, 78, 108, 210, 125, 3, 77, 69,
        58, 198, 92, 127, 159, 29, 250, 66, 226, 127, 151, 93,
    ];

    let hash = hash_confirm(&r_enc, &cache);

    assert_eq!(
        hash,
        [
            81, 13, 231, 108, 247, 190, 161, 217, 137, 237, 249, 138, 107, 121, 117, 8, 102, 167,
            72, 38, 200, 105, 115, 126, 139, 217, 187, 133, 91, 11, 162, 63,
        ]
    );
}

#[cfg(feature = "ntrulpr761")]
#[test]
fn test_hide() {
    let r = R3::from([
        1, 0, 0, 0, 1, 0, 0, 1, -1, -1, -1, 0, 0, -1, 0, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1,
        0, 1, 1, 1, -1, -1, 1, 1, 0, 0, -1, -1, 1, -1, 0, -1, -1, -1, 1, 0, 0, 1, 0, 0, -1, 1, -1,
        0, 1, -1, 0, 0, -1, 1, 0, 1, -1, 1, 1, 0, 0, 1, -1, 1, 0, 0, -1, 0, 1, -1, 1, 0, 0, -1, 0,
        0, 0, 0, -1, -1, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0, 1, 1, 1, 0, -1, 0, -1, 0, -1, -1, 0,
        -1, 1, 1, 1, 1, -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, -1, 1, -1, 0, 0, 0, -1, -1, 0, 1,
        1, 1, 1, 1, 0, 0, 0, 1, 0, 0, -1, -1, -1, -1, 1, -1, 0, -1, 1, -1, -1, 0, 1, -1, 0, 1, -1,
        -1, 1, 0, 0, 1, 1, 1, 1, -1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, -1, 0, -1, -1, 0, 0, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 0, 1, 0, 0, -1, 1, -1, 1, -1, 1, -1, 1, 0, 1, 1, 0, -1, 1, -1, 1, 0, -1, 0,
        0, 1, 1, -1, -1, 0, 1, -1, -1, 0, 1, -1, 0, -1, 0, -1, -1, 0, -1, 1, 1, -1, 1, 0, 1, 1, 1,
        1, 0, 0, -1, 1, -1, 1, 1, 1, -1, -1, 0, 1, 1, -1, 0, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1,
        -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, 0, 1, 0, -1, -1, 0, -1, 0, 0, 1, 1, 0, -1, 1, 0, 0,
        -1, 0, 1, 1, 0, -1, 0, 1, 1, 0, 0, -1, 1, 1, 0, 1, -1, 0, 0, 1, 0, 0, -1, -1, 1, 0, -1, -1,
        -1, 1, 1, 0, 1, 0, -1, -1, -1, 1, -1, -1, 0, -1, -1, 1, 1, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        1, 0, -1, 1, -1, -1, 0, 1, 1, -1, 0, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 0, -1, 0, 0, -1,
        -1, -1, 1, 0, -1, 1, -1, 1, 1, -1, -1, 0, -1, 0, -1, 1, 1, 1, 0, -1, 1, -1, 0, 0, 1, 1, 1,
        -1, -1, -1, -1, 1, 1, -1, 0, 0, 1, 1, 0, 0, 0, -1, 1, -1, -1, -1, 1, 1, 0, -1, -1, 0, 1, 1,
        0, 0, 1, -1, 1, 1, 1, 1, -1, 1, 0, 0, 1, 1, 0, -1, -1, 1, -1, 0, 1, -1, -1, 1, 0, -1, 0, 0,
        -1, 0, -1, -1, 1, 0, 1, 0, 0, 0, -1, -1, 1, 1, -1, 1, 0, 1, -1, 1, 1, 1, -1, 0, 0, 0, 0,
        -1, -1, 0, 1, 0, 1, 1, -1, 0, 0, 1, -1, 1, -1, 0, -1, 1, 0, 0, 1, 1, 1, -1, 0, -1, -1, 0,
        -1, 0, 0, -1, 1, -1, 1, -1, 0, 0, -1, 1, 0, -1, 0, 1, 0, 0, -1, 0, -1, 0, 0, 1, 1, -1, -1,
        1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 0, 0, -1, 1, 1, 1, 1, 0, -1, 1, 1, -1, 0, -1, 1, -1, 1, 0,
        1, -1, 1, 1, -1, 0, 1, 1, -1, 0, -1, -1, 1, 1, 0, -1, -1, 0, 1, 0, -1, 1, 1, 1, 1, 1, 1,
        -1, 0, 0, 1, -1, 1, 0, -1, 1, 0, 1, 0, 1, 0, 0, 0, 1, -1, 1, 0, -1, 1, 0, 0, -1, -1, 0, -1,
        0, 1, 0, 0, 0, -1, 0, 1, 1, 1, 1, 1, 0, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 0, 0, -1, 0, 0,
        -1, 1, -1, 1, 0, 0, 0, 0, 0, 1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1,
        -1, -1, 1, -1, -1, 1, 0, -1, -1, -1, 0, 1, 0, -1, 0, -1, -1, 0, 0, -1, 0, -1, -1, 0, 0, -1,
        1, 1, 0, -1, 0, -1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 0, 1, -1, 0, 1, -1, 1, 1, -1, -1, 1, 0,
        -1, -1, -1, 0, 0, 1, -1, 1, -1, 0, -1, 1, -1, 0, 0, 1, 1, 0, -1, -1, -1, 1, 1, -1, -1, 1,
        -1,
    ]);
    let pk: [u8; PUBLICKEYS_BYTES] = [
        56, 34, 181, 213, 105, 213, 157, 187, 54, 231, 40, 167, 152, 249, 125, 74, 129, 229, 62,
        142, 142, 230, 250, 193, 181, 147, 100, 236, 65, 151, 171, 89, 230, 6, 232, 118, 139, 207,
        233, 119, 184, 151, 50, 143, 181, 37, 229, 254, 222, 214, 12, 178, 160, 114, 50, 113, 155,
        192, 220, 30, 214, 162, 159, 113, 191, 75, 15, 53, 70, 206, 120, 198, 176, 230, 136, 223,
        169, 84, 87, 182, 65, 11, 121, 136, 3, 226, 177, 142, 183, 147, 58, 158, 8, 88, 255, 241,
        243, 69, 159, 103, 118, 157, 242, 255, 19, 121, 66, 67, 136, 124, 100, 238, 77, 41, 206,
        253, 110, 231, 186, 16, 88, 116, 242, 188, 211, 38, 37, 97, 220, 172, 216, 207, 63, 102,
        53, 34, 196, 170, 188, 224, 56, 233, 97, 191, 12, 85, 251, 101, 89, 162, 176, 25, 244, 97,
        159, 39, 5, 62, 150, 78, 32, 212, 158, 25, 192, 11, 90, 155, 190, 165, 172, 75, 123, 205,
        96, 151, 138, 140, 168, 207, 113, 172, 139, 234, 86, 159, 4, 160, 181, 104, 252, 38, 98,
        128, 115, 20, 164, 152, 163, 254, 108, 254, 29, 206, 237, 118, 90, 43, 87, 51, 165, 179,
        192, 254, 217, 237, 106, 29, 223, 222, 19, 185, 203, 85, 7, 43, 176, 185, 10, 34, 109, 66,
        51, 68, 221, 163, 33, 220, 46, 140, 184, 235, 7, 91, 112, 12, 56, 243, 74, 70, 61, 14, 231,
        223, 49, 73, 229, 109, 89, 131, 163, 26, 60, 163, 74, 58, 16, 255, 183, 215, 4, 249, 118,
        26, 34, 152, 206, 250, 151, 27, 70, 115, 92, 163, 254, 104, 18, 98, 171, 136, 225, 219,
        176, 221, 184, 16, 213, 187, 236, 188, 64, 101, 226, 51, 135, 99, 198, 182, 26, 74, 50,
        181, 219, 133, 122, 179, 140, 71, 67, 157, 158, 77, 136, 116, 141, 189, 179, 54, 226, 217,
        139, 217, 85, 178, 187, 87, 228, 200, 123, 90, 55, 32, 138, 219, 197, 230, 1, 0, 97, 9, 90,
        247, 172, 185, 231, 62, 165, 38, 133, 21, 153, 117, 161, 176, 224, 63, 229, 137, 131, 39,
        116, 32, 10, 139, 48, 209, 239, 159, 48, 39, 44, 56, 6, 133, 184, 111, 194, 248, 165, 237,
        30, 149, 216, 199, 34, 212, 189, 181, 63, 3, 93, 45, 104, 245, 75, 88, 27, 116, 184, 146,
        203, 59, 31, 35, 249, 183, 59, 194, 250, 42, 140, 182, 245, 156, 14, 226, 100, 141, 32, 62,
        128, 38, 108, 82, 189, 179, 232, 193, 16, 67, 210, 48, 171, 215, 210, 58, 208, 85, 147,
        190, 225, 151, 57, 65, 129, 145, 74, 186, 66, 73, 255, 60, 93, 112, 146, 228, 159, 11, 56,
        198, 225, 194, 250, 62, 223, 141, 35, 252, 163, 216, 41, 233, 59, 122, 61, 252, 8, 38, 58,
        255, 238, 119, 112, 159, 83, 236, 56, 231, 32, 77, 29, 172, 166, 169, 115, 13, 178, 40,
        100, 135, 83, 211, 114, 220, 129, 213, 8, 156, 207, 28, 29, 73, 35, 106, 156, 225, 130,
        207, 106, 206, 212, 148, 139, 175, 76, 102, 242, 226, 152, 111, 146, 45, 58, 190, 188, 121,
        38, 222, 104, 66, 229, 14, 16, 60, 59, 234, 11, 185, 47, 52, 136, 47, 7, 190, 251, 31, 216,
        158, 95, 5, 110, 254, 151, 9, 36, 229, 110, 205, 241, 244, 19, 166, 49, 57, 175, 240, 191,
        140, 113, 85, 187, 61, 61, 226, 105, 96, 251, 246, 201, 207, 188, 159, 101, 218, 101, 142,
        179, 127, 37, 28, 220, 244, 52, 62, 14, 48, 247, 251, 216, 178, 146, 180, 21, 48, 62, 222,
        87, 187, 0, 207, 171, 13, 230, 231, 30, 37, 134, 38, 225, 190, 148, 45, 240, 198, 63, 155,
        175, 84, 240, 17, 36, 116, 200, 179, 12, 143, 53, 183, 137, 240, 35, 76, 164, 81, 161, 191,
        53, 193, 122, 227, 235, 218, 89, 152, 78, 21, 164, 5, 137, 137, 119, 129, 64, 195, 10, 218,
        211, 190, 218, 94, 241, 116, 65, 219, 168, 133, 139, 241, 152, 54, 159, 44, 111, 90, 198,
        191, 141, 158, 119, 245, 222, 65, 146, 170, 147, 68, 217, 157, 47, 179, 25, 239, 105, 61,
        115, 188, 223, 13, 189, 27, 134, 28, 6, 51, 228, 139, 172, 104, 121, 66, 35, 117, 114, 125,
        245, 6, 16, 23, 161, 170, 61, 188, 0, 156, 29, 222, 91, 168, 224, 53, 101, 119, 67, 44, 86,
        30, 42, 38, 35, 111, 197, 148, 251, 174, 195, 161, 204, 2, 84, 128, 224, 35, 227, 174, 68,
        255, 84, 231, 255, 209, 227, 161, 114, 154, 238, 170, 85, 113, 90, 223, 111, 237, 40, 11,
        42, 77, 27, 18, 249, 74, 170, 254, 81, 114, 176, 68, 189, 63, 119, 166, 150, 243, 226, 176,
        169, 32, 232, 38, 56, 165, 99, 82, 92, 230, 28, 156, 44, 236, 214, 140, 250, 4, 36, 194,
        92, 221, 132, 120, 81, 73, 142, 223, 25, 68, 206, 226, 172, 234, 138, 251, 89, 39, 190,
        190, 122, 46, 1, 189, 92, 12, 79, 185, 125, 148, 198, 85, 83, 25, 203, 130, 156, 70, 58, 9,
        114, 217, 51, 93, 183, 202, 146, 164, 159, 113, 251, 126, 213, 196, 50, 119, 243, 23, 125,
        20, 180, 129, 32, 189, 202, 26, 107, 129, 74, 139, 49, 230, 89, 91, 43, 13, 158, 228, 35,
        99, 220, 211, 215, 41, 64, 82, 0, 219, 173, 253, 225, 101, 238, 49, 137, 59, 149, 90, 114,
        197, 156, 90, 138, 84, 73, 221, 89, 206, 168, 166, 236, 230, 196, 182, 76, 209, 36, 49,
        194, 48, 117, 241, 201, 185, 92, 217, 223, 92, 202, 130, 134, 153, 130, 81, 30, 60, 128,
        149, 197, 125, 92, 17, 182, 213, 255, 171, 175, 125, 89, 133, 156, 67, 2, 39, 15, 91, 178,
        98, 221, 140, 227, 27, 243, 118, 225, 110, 120, 124, 233, 182, 202, 170, 111, 96, 79, 91,
        221, 180, 14, 44, 81, 138, 236, 100, 83, 174, 139, 17, 78, 159, 113, 106, 230, 110, 4,
    ];
    let cache: [u8; HASH_BYTES] = [
        151, 153, 142, 125, 236, 255, 169, 87, 52, 34, 151, 78, 0, 78, 108, 210, 125, 3, 77, 69,
        58, 198, 92, 127, 159, 29, 250, 66, 226, 127, 151, 93,
    ];
    let out = hide(&r, &cache, &pk).unwrap();

    // println!("r={:?}", out.1);
    // println!("--------------------------");
    // println!("b={:?}", out.0);
}

#[cfg(feature = "ntrulpr761")]
#[test]
fn test_hash_session() {
    let y: [u8; HASH_BYTES] = [
        151, 153, 142, 125, 236, 255, 169, 87, 52, 34, 151, 78, 0, 78, 108, 210, 125, 3, 77, 69,
        58, 198, 92, 127, 159, 29, 250, 66, 226, 127, 151, 93,
    ];
    let z: [u8; CIPHERTEXTS_BYTES + HASH_BYTES] = [
        60, 32, 6, 158, 241, 55, 22, 65, 95, 33, 241, 108, 60, 23, 108, 37, 27, 247, 138, 36, 213,
        127, 30, 228, 17, 212, 168, 149, 82, 174, 159, 41, 112, 150, 185, 120, 92, 25, 10, 104,
        233, 219, 131, 31, 176, 15, 23, 113, 160, 176, 173, 227, 31, 34, 109, 213, 65, 205, 141,
        242, 190, 206, 222, 4, 4, 4, 7, 181, 109, 252, 71, 121, 222, 240, 155, 155, 128, 79, 143,
        134, 124, 159, 7, 105, 47, 46, 29, 185, 17, 8, 85, 204, 126, 210, 208, 174, 42, 168, 245,
        219, 254, 37, 198, 114, 177, 39, 239, 5, 224, 100, 18, 86, 235, 69, 67, 105, 201, 114, 237,
        218, 197, 48, 137, 85, 176, 212, 54, 75, 94, 171, 170, 78, 190, 60, 206, 130, 233, 126, 6,
        230, 151, 234, 225, 49, 154, 66, 19, 122, 172, 49, 115, 125, 188, 218, 20, 224, 74, 94,
        143, 147, 70, 78, 82, 175, 70, 178, 112, 31, 146, 107, 106, 128, 27, 147, 165, 122, 218,
        149, 210, 136, 212, 178, 193, 19, 193, 233, 130, 149, 45, 195, 150, 143, 119, 212, 207, 21,
        109, 123, 42, 99, 168, 148, 103, 189, 82, 85, 36, 194, 167, 230, 244, 84, 15, 155, 157, 31,
        104, 204, 207, 52, 23, 228, 240, 110, 103, 25, 235, 189, 73, 79, 11, 90, 171, 87, 12, 202,
        36, 139, 238, 192, 114, 173, 38, 222, 174, 0, 32, 87, 233, 146, 46, 26, 1, 204, 108, 181,
        17, 255, 90, 10, 192, 59, 14, 22, 99, 11, 239, 80, 120, 254, 91, 192, 126, 58, 206, 148,
        56, 92, 64, 241, 216, 73, 103, 99, 126, 198, 25, 43, 125, 120, 250, 27, 119, 154, 160, 2,
        98, 66, 130, 148, 206, 129, 94, 87, 52, 6, 100, 222, 231, 97, 94, 169, 32, 85, 46, 91, 9,
        252, 243, 255, 197, 230, 199, 151, 135, 186, 178, 139, 10, 19, 121, 144, 187, 157, 134,
        192, 31, 160, 62, 174, 119, 20, 21, 192, 28, 65, 20, 192, 17, 213, 233, 132, 194, 81, 24,
        206, 29, 191, 35, 226, 173, 27, 48, 45, 11, 152, 20, 102, 192, 79, 18, 28, 18, 129, 64, 78,
        183, 79, 24, 85, 34, 71, 45, 145, 94, 103, 16, 60, 226, 123, 50, 194, 34, 102, 127, 43,
        230, 109, 187, 223, 241, 129, 233, 122, 57, 119, 243, 29, 69, 75, 213, 245, 92, 177, 247,
        61, 162, 230, 104, 32, 206, 168, 137, 242, 137, 43, 111, 27, 87, 246, 130, 89, 218, 35,
        148, 156, 194, 97, 81, 220, 35, 24, 91, 121, 191, 218, 135, 97, 208, 54, 87, 179, 135, 211,
        226, 98, 76, 189, 58, 97, 180, 107, 77, 38, 14, 45, 52, 100, 197, 31, 237, 118, 154, 115,
        218, 180, 62, 46, 121, 119, 171, 156, 241, 154, 185, 57, 111, 56, 119, 151, 27, 94, 59, 61,
        205, 249, 10, 42, 162, 253, 149, 3, 68, 217, 224, 227, 249, 245, 231, 4, 42, 83, 48, 77,
        28, 45, 127, 127, 150, 177, 186, 43, 144, 127, 127, 218, 167, 55, 225, 150, 180, 166, 240,
        2, 94, 60, 248, 224, 39, 37, 101, 59, 164, 98, 221, 148, 158, 198, 65, 32, 34, 134, 169,
        30, 231, 164, 44, 245, 239, 94, 61, 229, 185, 227, 40, 75, 184, 163, 199, 217, 35, 82, 70,
        248, 131, 207, 91, 232, 42, 144, 92, 68, 56, 125, 123, 98, 72, 42, 101, 168, 121, 237, 178,
        203, 168, 31, 117, 157, 45, 53, 68, 51, 146, 204, 179, 116, 150, 200, 106, 212, 77, 50, 76,
        40, 54, 180, 134, 90, 117, 17, 123, 62, 148, 143, 98, 44, 214, 127, 209, 233, 41, 94, 237,
        100, 104, 62, 208, 36, 12, 190, 46, 53, 110, 83, 202, 171, 131, 89, 222, 148, 177, 67, 206,
        248, 28, 75, 21, 65, 255, 33, 38, 32, 209, 117, 142, 99, 146, 241, 100, 80, 65, 70, 68,
        204, 40, 143, 65, 208, 41, 244, 197, 126, 72, 77, 114, 246, 115, 131, 234, 26, 52, 204,
        234, 6, 66, 70, 4, 126, 202, 33, 14, 225, 252, 145, 246, 129, 214, 81, 109, 205, 164, 106,
        214, 119, 47, 184, 36, 50, 186, 142, 213, 80, 221, 108, 146, 7, 81, 158, 92, 84, 122, 55,
        36, 102, 225, 158, 139, 21, 161, 46, 127, 167, 52, 61, 211, 38, 254, 137, 39, 55, 202, 52,
        52, 242, 34, 120, 165, 245, 242, 248, 48, 52, 89, 233, 74, 77, 218, 114, 226, 155, 58, 15,
        185, 62, 111, 19, 98, 139, 204, 80, 242, 175, 28, 63, 136, 151, 68, 213, 236, 239, 122, 39,
        229, 194, 105, 129, 205, 89, 237, 245, 125, 191, 240, 178, 55, 116, 112, 243, 27, 199, 199,
        144, 204, 90, 192, 115, 135, 162, 96, 7, 250, 2, 39, 68, 123, 236, 214, 106, 151, 236, 204,
        40, 183, 109, 39, 242, 224, 139, 160, 165, 8, 77, 121, 117, 70, 10, 60, 241, 13, 144, 100,
        106, 106, 20, 241, 161, 62, 246, 244, 115, 181, 226, 183, 219, 64, 211, 68, 9, 57, 195,
        247, 232, 2, 85, 67, 19, 64, 103, 56, 64, 207, 153, 204, 129, 141, 164, 27, 204, 104, 135,
        62, 159, 115, 112, 92, 255, 116, 57, 208, 136, 48, 25, 151, 197, 13, 234, 157, 237, 232,
        184, 61, 29, 60, 225, 217, 253, 219, 222, 173, 231, 147, 220, 30, 165, 251, 16, 135, 231,
        202, 254, 244, 178, 237, 127, 135, 88, 163, 12, 226, 246, 220, 36, 165, 131, 246, 235, 173,
        24, 194, 36, 249, 209, 159, 220, 228, 153, 57, 123, 63, 184, 31, 199, 16, 74, 49, 38, 212,
        234, 242, 254, 220, 225, 133, 2, 134, 123, 7, 107, 32, 93, 12, 137, 183, 150, 201, 79, 25,
        141, 177, 186, 250, 95, 202, 177, 175, 122, 92, 49, 179, 114, 81, 97, 14, 163, 134, 168,
        168, 191, 209, 255, 232, 254, 229, 186, 132, 31, 206, 30, 211, 193, 200, 46, 212, 151, 6,
        54, 32, 19, 189, 42, 245, 191, 61, 131, 247, 108, 117, 86, 246, 7, 5, 224, 176, 159, 161,
        0, 21, 0, 232, 9, 193, 104, 45, 183, 137, 99, 210, 186, 199, 216, 143, 144, 105, 20, 115,
        204, 95, 199, 89, 94, 111, 181, 212, 190, 251, 34, 138, 168, 59, 84, 45, 245, 230, 163, 21,
        59, 120, 174, 12, 75, 163, 140, 236, 181, 79, 123, 67, 226, 40, 31, 45, 157, 126, 172, 92,
        190, 196, 116, 109, 159, 253, 181, 183, 187, 245, 219, 9, 165, 197, 130, 14, 24, 27, 144,
        30, 239, 88, 24, 38, 73, 10, 180, 91, 131, 122, 199, 20, 82, 126, 228, 97, 134, 227, 193,
        222, 186, 116, 151, 6, 3, 3, 134, 213, 18, 37, 254, 197, 41, 245, 75, 45, 91, 50, 62, 248,
        140, 216,
    ];
    let out = hash_session(1, &y, &z);

    assert_eq!(
        out,
        [
            18, 102, 164, 85, 199, 56, 160, 117, 209, 239, 28, 73, 143, 17, 244, 5, 1, 162, 228,
            51, 194, 43, 82, 118, 0, 246, 244, 72, 201, 85, 136, 228
        ]
    );
}

#[cfg(feature = "ntrulpr761")]
#[test]
fn test_expand() {
    let key: [u8; SEEDS_BYTES] = [
        151, 153, 142, 125, 236, 255, 169, 87, 52, 34, 151, 78, 0, 78, 108, 210, 125, 3, 77, 69,
        58, 198, 92, 127, 159, 29, 250, 66, 226, 127, 151, 93,
    ];
    let out = expand(&key).unwrap();

    assert_eq!(
        out,
        [
            466886879, 3805536058, 418619842, 579911611, 55227098, 251810133, 3880337202, 23230866,
            2069518008, 572406649, 3923686849, 4156412155, 3326446113, 3656173862, 1700019479,
            3650756319, 943794036, 3763192377, 883121252, 1119550060, 2768283731, 3960652040,
            4175009575, 3567815233, 1939544378, 3825902593, 1221699488, 3545163055, 1299573848,
            2439323875, 3539875924, 1703639252, 3110587955, 4002497537, 3451828540, 2300838408,
            2773791834, 1422688412, 2999887733, 2936224976, 4290964913, 4241238115, 1691844228,
            3747696356, 1215650914, 315071458, 3085451559, 1990129377, 2850768024, 2640435072,
            4024929728, 3546593652, 1414554654, 792579194, 3866516183, 3493336219, 1672807091,
            1923738882, 384616086, 898922910, 2433615999, 2938821512, 3548222867, 3908794191,
            1438071027, 3165626442, 3060964463, 2610243496, 3946858902, 1575612737, 83283233,
            424084922, 2901425927, 2057157842, 1314376139, 1795712397, 2804032562, 1448567575,
            130228779, 2591396973, 3090851707, 246691342, 1086566522, 197562439, 3280131291,
            485479622, 475566621, 719484734, 589020573, 4057318297, 9283402, 279072121, 176327087,
            2021189063, 4221137902, 4049862874, 1622484427, 1504439069, 3207051896, 545937194,
            569550167, 2925506614, 785942155, 441261648, 782940657, 3841159120, 1453633844,
            3504529100, 244336236, 3293331789, 2695193762, 821143605, 544111856, 1695728203,
            1263539489, 3868420458, 3614981285, 233393244, 1461100243, 2731472066, 544661308,
            3722766356, 1706299164, 2571111243, 2343791348, 3594541963, 302685807, 1270551849,
            3222458371, 3007351958, 3523579909, 3468005917, 1255623660, 2409522402, 491569706,
            1559414985, 914403202, 3967451290, 1532066218, 1636151661, 1772549698, 2060093251,
            1803309857, 580037805, 276575985, 3058413438, 1874793755, 4201921294, 1132799319,
            1171470274, 783904935, 2860558944, 3767752697, 1270921225, 496774458, 1115820692,
            2074657077, 1652235203, 3689654324, 758871595, 1006590741, 3053088007, 425768528,
            645938025, 2291710050, 643978858, 500909233, 1828931763, 4083818219, 2074333866,
            3716867552, 3035148826, 3402275135, 1913546067, 2795743317, 2935228677, 2233905986,
            42199901, 1357765419, 543964922, 1340129639, 3760421959, 1926512041, 295855417,
            1655485353, 529017114, 1880942431, 2612936111, 377914471, 4215787066, 3537132414,
            855463524, 3805276695, 3221515969, 3174993371, 2996697056, 2619425672, 1474451657,
            1003134736, 2927552113, 2755902894, 1901110224, 377776981, 3251459772, 3044489619,
            1830948724, 3924146195, 2470567302, 2940016553, 840374040, 3909920513, 1962485402,
            2559572655, 2184607735, 1312685919, 3303277891, 924625972, 144095020, 3252091362,
            1084917915, 954106350, 436531801, 1061159866, 2627443756, 2973045282, 2303583128,
            2867046378, 2917975308, 2846170574, 992166104, 565046532, 3783974182, 839933275,
            2055591815, 3652359896, 2399924434, 2044670074, 1579438049, 2814643281, 1758954702,
            3202089567, 3800920700, 3956738146, 1052362497, 3630634012, 3293330287, 1768287634,
            2413853514, 1585794750, 832161361, 1061816355, 2040289773, 2130732370, 965671566,
            1258184636, 3530078300, 3601196759, 3623040640, 1009784757, 2500279677, 248338828,
            2163820374, 2940134928, 914972892, 4254318215, 2860342304, 913988925, 3846614145,
            444757205, 953597647, 2429191203, 2244995502, 763060880, 2071452502, 2524094937,
            2634019274, 2642359503, 2235461787, 3737934417, 3365926754, 2280728930, 1476700354,
            810355849, 1410822208, 1379732417, 688306192, 2890129768, 3690136828, 2396374896,
            4210003162, 2695157022, 3006102800, 1464083627, 292131015, 1719364161, 2556473846,
            52750103, 96964250, 1851358863, 3499763808, 3643801370, 3899242804, 2070991210,
            4280849076, 1118480464, 2233475271, 3753653399, 988427917, 929388359, 610741165,
            4148212126, 3482189782, 2062208381, 2581311242, 4258417376, 2240876564, 2522799724,
            2344962361, 120596746, 138968622, 1770811560, 2279493028, 3494440215, 7964682,
            1326280443, 543112575, 1110073595, 1099713366, 3468982676, 3427716623, 579178048,
            4110986686, 1135687741, 306276538, 4046068988, 2276541441, 220349873, 936737166,
            2623689409, 2680152398, 712060359, 668572205, 376766700, 1513944390, 792497333,
            3419281980, 1600395449, 2959453536, 442616071, 3920499186, 1060413080, 28342744,
            3937816682, 975917075, 2613754579, 2848335958, 1686497149, 139341040, 3594120228,
            4098247577, 2262408096, 2102196741, 180570428, 3273589661, 3724777079, 3143922349,
            2842728644, 2946934316, 2490519046, 2800952911, 2946399152, 4248487363, 2176154892,
            592404890, 269236007, 1409778913, 1548583734, 3370600910, 900800736, 1646395334,
            1076386908, 640197714, 3435629221, 2151443550, 100179827, 484050310, 2849953782,
            4045122693, 3184587086, 3382929000, 1850663466, 1818004455, 808126065, 478586799,
            2542670087, 2530252666, 1241055426, 2830826254, 2248218355, 1964523723, 834227478,
            521023839, 2278534726, 1249465975, 3012442826, 20127816, 624035826, 3008774113,
            4230543143, 570020864, 1093069396, 243044026, 2579901971, 1369780218, 3257891680,
            64432701, 2973202190, 885697139, 4162025585, 3806665965, 3271130680, 678382125,
            818901291, 3507582256, 94117230, 1583325906, 618354970, 3078785439, 597488871,
            2484475943, 2889872621, 686345735, 396197795, 649991542, 3192401291, 1251467154,
            3326595080, 4113941342, 2723316435, 3045913940, 2918710060, 3263317585, 677605406,
            2795325990, 2542638515, 4192301817, 1599826367, 2270008852, 4086190186, 2644828887,
            607165570, 1476654081, 207511556, 4081460941, 2551866999, 102453865, 775758395,
            1340904282, 2058259725, 3322184154, 2685018480, 928444823, 911054450, 333798479,
            2249195615, 1830260626, 3342379109, 310940851, 389095703, 2980553213, 3539128704,
            1030507067, 1685035294, 391728187, 3920808696, 413609542, 4031471111, 1356137422,
            120910936, 66789510, 2419453664, 848489333, 3712516249, 959981572, 3821618568,
            2930440773, 3503731188, 3416921278, 3948366823, 1614291518, 166114612, 1134404065,
            2205611094, 31312060, 298754501, 427078075, 2970627058, 3794449874, 4110602300,
            3560042991, 1786837567, 330847564, 680644225, 240336138, 941370909, 4175370387,
            4101454691, 2664795991, 1507711889, 3861718764, 1778204703, 1984955318, 4073825873,
            1684826630, 564110149, 2120878235, 3603003437, 1797200620, 2517716030, 362248765,
            3503344422, 2038479759, 2440269317, 3271873262, 2034583765, 139114769, 602390152,
            1494857886, 1194118842, 2606899258, 4114698795, 4167865276, 970922986, 3960036339,
            3461340537, 2856316087, 887633502, 3208770894, 3037677537, 2543508652, 1386202813,
            1840196985, 2149382532, 2440613000, 4167596829, 807878118, 4215863779, 4133387272,
            2626044893, 1544300710, 2293830547, 685901456, 211530050, 2178531408, 3872147157,
            473090830, 3537329454, 1632338837, 4252514121, 3512600217, 748203473, 1834030416,
            2132182063, 1562482210, 3877213703, 4264554152, 1612968974, 3884361102, 1304060471,
            709488464, 3514281017, 1860283956, 1856615667, 3856072442, 3582232258, 1912591153,
            1354666590, 1917168237, 88700624, 1207559709, 3237241690, 3807616795, 3947000239,
            3456211015, 2825748677, 303862481, 4224380819, 1777763925, 2921433327, 3791286854,
            2380381619, 2683922820, 2513476498, 294015664, 1590817519, 1109350484, 2467314056,
            199120301, 434587717, 2580432675, 76533004, 1011452290, 2345789451, 3206964806,
            1622505920, 4276476216, 480362007, 2767545350, 3459353851, 1962018712, 3904862121,
            2206790123, 1788140308, 1524910658, 1347465126, 4237996157, 1428799973, 361135310,
            772034210, 233998960, 3059218072, 1171681722, 535867001, 3875698085, 3810346129,
            24166927, 303286233, 2143763681, 3135157764, 4222626988, 2228348421, 1815019058,
            975388695, 2490908501, 2672163133, 1052083715, 2636472320, 841588580, 1069865960,
            1014346346, 121748005, 2804380254, 2279944523, 1993933882, 4032038161, 3734211858,
            533520499, 1376560072, 2034040301, 2712540244, 3261098670, 1262238177, 1535149993,
            926854940, 3554366049, 4127939399, 2913006622, 1284797325, 3043393405, 350195090,
            2285560990, 2539421571, 1707087462, 3986108688, 208309423, 4017966359, 1255345995,
            724196699, 612258874, 1767447034, 1203528801, 3838678256, 1958012094, 2140009258,
            442368125, 1350473455, 1535564504, 37351404, 668459583, 3134614302, 46875539,
            265909078, 1817788097, 2914742116, 3943637645, 1634666165, 139099245, 517202117,
            1567235181, 2671372876, 752658974, 3547771036, 2173427320, 3754648522, 3053180226,
            467687114, 310361313, 2542984831, 2881483368, 291476801, 4136296010, 1202330773,
            1305869811, 871164914, 2336748407, 3814363380, 3604704301, 2080868039, 1901252122,
            3970434344, 2312700935, 988295512, 3432145780, 1881105817, 2788446677, 124055936,
            3229833788, 279756044, 3142336849, 946058322, 4066041062, 3698567164, 315293119,
            2373509228, 2756818535, 1417198777, 970644890, 1926623972, 1634122561, 3027787327,
            3882228045, 4053460479, 92022443, 1788359520, 679295031, 272825427, 584199484,
            1555087955, 691402373, 784076897, 3473828475, 1448415803, 4098616614, 41084115,
            1861336180, 4179502698, 3817482234, 890910179, 2546366041, 2771906763, 3609714066,
            617574853, 1867647508, 741914319, 3813370619, 4118650663, 3647364684, 4043614021,
            1728905357, 3779180866, 3726904908,
        ]
    );
}
