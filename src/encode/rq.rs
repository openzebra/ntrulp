use crate::math::nums::{u32_divmod_u14, u32_mod_u14};

fn encode(out: &mut Vec<u8>, r: &[u16], m: &[u16], len: usize) {
    if len == 1 {
        let mut r_val = r[0];
        let mut m_val = m[0];
        while m_val > 1 {
            out.push(r_val as u8);
            r_val >>= 8;
            m_val = (m_val + 255) >> 8;
        }
    }

    if len > 1 {
        let mut r2 = vec![0; (len + 1) / 2];
        let mut m2 = vec![0; (len + 1) / 2];
        let mut i = 0;
        while i < len - 1 {
            let m0 = m[i] as u32;
            let mut r_val = r[i] as u32 + (r[i + 1] as u32) * m0;
            let mut m_val = (m[i + 1] as u32) * m0;
            while m_val >= 16384 {
                out.push(r_val as u8);
                r_val >>= 8;
                m_val = (m_val + 255) >> 8;
            }
            r2[i / 2] = r_val as u16;
            m2[i / 2] = m_val as u16;
            i += 2;
        }
        if i < len {
            r2[i / 2] = r[i];
            m2[i / 2] = m[i];
        }
        encode(out, &r2, &m2, (len + 1) / 2);
    }
}

fn decode(out: &mut [u16], s: &[u8], m: &[u16], len: usize) {
    if len == 1 {
        if m[0] == 1 {
            out[0] = 0;
        } else if m[0] <= 256 {
            out[0] = u32_mod_u14(s[0] as u32, m[0]);
        } else {
            out[0] = u32_mod_u14((s[0] as u32) + (((s[1] as u16) << 8) as u32), m[0]);
        }
    }
    if len > 1 {
        let mut r2 = vec![0u16; (len + 1) / 2];
        let mut m2 = vec![0u16; (len + 1) / 2];
        let mut bottomr = vec![0u16; len / 2];
        let mut bottomt = vec![0u32; len / 2];
        let mut i = 0;
        while i < len - 1 {
            let m_val = (m[i] as u32) * (m[i + 1] as u32);
            if m_val > 256 * 16383 {
                bottomt[i / 2] = 256 * 256;
                bottomr[i / 2] = (s[0] as u16) + 256 * (s[1] as u16);
                i += 2;
                m2[i / 2] = ((((m_val + 255) >> 8) + 255) >> 8) as u16;
            } else if m_val >= 16384 {
                bottomt[i / 2] = 256;
                bottomr[i / 2] = s[0] as u16;
                i += 1;
                m2[i / 2] = ((m_val + 255) >> 8) as u16;
            } else {
                bottomt[i / 2] = 1;
                bottomr[i / 2] = 0;
                m2[i / 2] = m_val as u16;
            }
        }
        if i < len {
            m2[i / 2] = m[i];
        }
        decode(&mut r2, &s, &m2, (len + 1) / 2);
        i = 0;
        while i < len - 1 {
            let r = bottomr[i / 2] as u32 + bottomt[i / 2] * r2[i / 2] as u32;
            let (mut r1, r0) = u32_divmod_u14(r, m[i]);

            r1 = u32_mod_u14(r1, m[i + 1]) as u32;
            out[i] = r0;
            out[i + 1] = r1 as u16;
            i += 2;
        }
        if i < len {
            out[i] = r2[i / 2];
        }
    }
}

pub fn rq_encode<const P: usize, const Q: usize, const Q12: usize>(rq: &[i16; P]) -> Vec<u8> {
    let mut out = Vec::new();
    let mut r = [0u16; P];
    let m = [Q as u16; P];

    for i in 0..P {
        r[i] = (rq[i] + Q12 as i16) as u16;
    }

    encode(&mut out, &r, &m, P);

    out
}

pub fn rq_decode<const P: usize, const Q: usize, const Q12: usize>(s: &[u8]) -> [i16; P] {
    let mut rq = [0i16; P];
    let mut r = [0u16; P];
    let m = [Q as u16; P];

    decode(&mut r, &s, &m, P);

    for i in 0..P {
        rq[i] = (r[i] as i16) - Q12 as i16;
    }

    rq
}

#[test]
fn test_encode() {
    const P: usize = 761;
    const Q: usize = 4591;
    const Q12: usize = (Q - 1) / 2;

    let data: [i16; P] = [
        -938, 1083, -2288, 520, -1197, -1513, 210, -1533, -1841, 1629, 97, 1526, -555, 1439, 1786,
        506, -2256, 1687, -2023, -1299, 1394, -1641, -636, -484, -1132, -1952, -180, 2229, 1645,
        1272, 71, -2105, -1973, 832, -159, 1530, 1811, 831, 264, -255, -960, 251, 583, 415, 2080,
        -2191, 2051, -1235, -2203, 1329, -760, 934, 1851, 197, -190, -527, 1033, 2116, -1707, 868,
        639, -1656, -2163, 417, 1246, 1170, 231, -2236, -2140, -206, -2080, 1029, 1174, -1105,
        -1258, -1725, -1441, -233, 736, 1784, -2066, -435, 1227, 1780, -164, -1891, -416, 945,
        -1525, 1640, -852, -433, 246, 587, -199, 1461, 817, -1462, 7, 1131, 422, 1636, -782, -564,
        -1709, 1525, -1190, -828, -392, -300, -243, 1960, 2271, 1842, 1160, -120, -1121, -694,
        1997, 732, -1625, 2286, 935, -385, 498, -1088, -112, -2163, 1582, 188, 1406, -156, 349,
        1665, 16, -1388, -1917, -1895, 239, 1103, 1344, 2092, -134, 1314, 1830, -1084, -967, -667,
        2044, 2252, -693, -1793, 1235, -1905, 381, -1364, -1954, -884, 222, 1685, 1008, 451, 508,
        -1586, -1062, 585, 1543, -1758, 1822, -1726, -752, -1022, -1482, -2108, -927, -1721, -451,
        -165, -1868, -1982, -891, -1765, 94, 714, 1026, -1329, -726, 333, 1943, -2112, -1718, 1180,
        -828, 900, 110, -1491, -1147, -734, -1776, -483, -918, 1567, 1509, -734, -2232, 534, -91,
        -1595, 1120, -326, 1511, -646, -862, 1103, -2062, -1138, 264, 2220, -1247, -709, 2293,
        -218, 2285, 1385, -995, 1819, -2151, -1604, -2186, -1727, -439, -314, 650, 1956, 1593, 37,
        375, 884, -999, 1732, 1890, -1425, 1987, -1110, -964, 1141, -162, 948, 1400, -2213, 1127,
        1580, -647, 81, -1189, -1840, -1357, -1700, 820, -31, 909, -401, 1267, 531, 2157, 2062,
        387, -1672, 1522, -1111, -1207, -485, 2088, -1470, -476, -729, -1532, -101, 920, -2278,
        842, -1593, -783, 1728, 1202, -1716, -1946, -1849, -1425, -1772, -1447, -339, -243, -1745,
        -913, -1165, 1092, 1485, 1586, 876, -236, -2091, 1143, -375, -962, 257, -475, 358, -967,
        -1176, 2105, 1530, -585, 1190, 888, -2206, -237, -2078, -712, -732, 698, 969, 2284, 41,
        812, 649, -1263, 1304, -727, 1778, -763, 1226, 1451, -366, -1564, -1394, -1239, 1610, -797,
        1494, 117, -763, 1453, 2219, -42, -872, -2158, -1599, 2034, 1348, -1790, -901, -733, 115,
        -272, 1669, -2069, -636, -1287, -938, -1987, -1858, 1732, 2104, 401, -1436, 746, -741, 451,
        -1461, 1537, 1044, 1385, -1686, -1139, -1536, 812, -2063, -981, 1615, -2039, -2136, -1122,
        -2166, -1719, 922, -379, -234, -751, 595, 21, -2194, -2027, 1930, -326, -1134, 1511, 1911,
        -1577, 328, -796, -2280, -423, 864, -557, -876, 752, 1847, -747, -2045, 1137, -2028, -1436,
        1877, 903, -2098, 1061, 970, -571, -971, 1750, 1113, 1984, -1845, 828, 15, -673, 2032,
        -1058, 45, 392, 565, -846, -2224, -234, 580, -323, -231, 685, -610, 810, -814, -884, -702,
        -639, 1118, -45, -2210, -1274, 2142, 200, 294, 1098, 706, -489, -941, 1108, 1178, 2141,
        -1083, -1332, -715, 679, -22, -748, 1730, 1350, -41, 287, -1687, 1366, 1135, -759, -1315,
        1311, -2047, 1721, 29, -1998, -1987, 197, -2249, 2272, -2174, -566, -462, 479, -813, -2163,
        909, -603, -142, 2287, -82, 181, -268, -337, 288, 1687, -1825, -1552, -1167, 242, -594,
        260, -1655, -372, -2106, -1811, 1542, 2016, -1008, 781, 917, 1876, 927, 488, -965, -613,
        -560, 124, -443, -1034, 964, -844, -1767, -1247, -76, -87, 282, -2001, -132, -2150, -2231,
        -2000, 2159, -564, -1041, 2148, -812, -56, -278, 496, 1168, 1546, 758, 319, 1347, -309,
        -1656, -804, -1342, 1791, -913, 369, -1983, -2195, 2282, -1689, 853, 2189, 459, 1194,
        -1205, -1462, 1708, 2009, -874, 1263, -86, 311, 1534, -175, 399, -1548, -2138, 1167, -2165,
        -1278, -1126, -38, 963, -253, 546, -1903, 718, -1925, -1940, -1170, 487, 154, -867, 1259,
        1450, 2055, 1663, -325, -794, 91, -383, 1298, 629, -1961, 211, -781, 1079, 1387, -496,
        -968, -331, 1201, 1006, -1197, -16, 16, -969, -477, -660, 708, 186, -280, 1244, 1824,
        -1518, 919, 1929, -2082, 1002, -2129, -1338, 58, -2292, -1328, 1285, -866, -366, -1047,
        704, -1311, -738, 599, 185, -1885, -2119, -1534, 753, 1052, -737, 1458, 13, 1439, -687,
        -849, 996, -1847, -546, 1686, -1547, 95, 2037, 1331, -2001, 1323, 801, -1367, -1689, 1559,
        -1916, -718, 1601, -1732, 977, 579, -1900, 195, -904, 2131, 1591, 1356, -861, 1258, 1794,
        359, -2002, -2158, -1854, -950, -844, 852, 1250, 1544, -1145, 1671, 987, 297, -1372, -1785,
        -396, -2021, 1730, 999, -1775, -218, -503, -1400, -1725, -1277, -1070, 120, 2084, -191,
        660, -892, -1903, 1636, 191, -1748, 2289, 1406, -1244, -457, -1793, 1520, -362, -392, 1767,
        -1362, 935, -2209, -1751, 1006, 826, 913, -1256, 1930, -2216, 1784, 1876, -996, 2135, 1739,
        -1220, 2174, -1069, -215, 639, -84, 1711, -1873, -390, -1831, -2183, -252, -2083, -525,
        1625, 1659, 758, 1658, -13, 344,
    ];
    let out = rq_encode::<P, Q, Q12>(&data);
    let dec = rq_decode::<P, Q, Q12>(&out);

    for c in dec {
        print!("{c}, ");
    }
}
